/* Generated By:JavaCC: Do not edit this line. MiniJava.java */
package parser;

import java.util.List;
import java.util.ArrayList;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import main.Scan;
import syntax.*;

/** Simple brace matcher. */
public class MiniJava implements MiniJavaConstants {

        private static int errors = 0;
        private static File file;

        public static Program parseFile(File f) {
                file = f;
                try {
                        FileReader reader = new FileReader(file);

                        MiniJava parser = new MiniJava(reader);
                        if (Scan.isVerbose())
                                parser.enable_tracing();
                        else
                                parser.disable_tracing();
                        Program p = parser.Input();
                        return p;
                } catch(ParseException e) {
                        Scan.logError("An unrecoverable error occured in parsing.");
                } catch (FileNotFoundException e) { }
                return null;
        }

        public static void addError() {
                errors += 1;
        }

        public static int errorCount() {
                return errors;
        }

/** Root production. */
  static final public Program Input() throws ParseException {
                    MainClass m; ClassDecl c; List<ClassDecl> cl = new ArrayList<ClassDecl>();
    try {
      m = MainClass();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        c = ClassDeclaration();
                                                      cl.add(c);
      }
      jj_consume_token(0);
                  {if (true) return new Program(m,cl);}
    } catch (ParseException e) {
                error(e);
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainClass() throws ParseException {
                          Identifier c; MainClass m;
    try {
      jj_consume_token(CLASS);
      c = Identifier();
      jj_consume_token(OB);
      m = MainFunction(c);
      jj_consume_token(CB);
                   {if (true) return m;}
    } catch (ParseException e) {
                String next = error(e);
                switch(next) {
                        case "<INVALID>":
                                break;
                        case "}":
                                break;
                        case "class":
                                skip_to(OB,-1);
                                skip_to(CB,OB);
                                break;
                        case "<IDENTIFIER>":
                                skip_to(OB,-1);
                                skip_to(CB,OB);
                                break;
                        default:
                                skip_to(CB,OB);
                                break;
                }
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public MainClass MainFunction(Identifier c) throws ParseException {
                                         Identifier f; Statement s;
    try {
      jj_consume_token(PUBLIC);
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(__main__);
      jj_consume_token(OP);
      jj_consume_token(__stringa__);
      f = Identifier();
      jj_consume_token(CP);
      jj_consume_token(OB);
      s = Statement();
      jj_consume_token(CB);
                  {if (true) return new MainClass(c,f,s);}
    } catch (ParseException e) {
                String next = error(e);
                if(next.equals("<INVALID>") || next.equals("public") || next.equals("static") || next.equals("void")
                         || next.equals("main") || next.equals("(") || next.equals("String[]") || next.equals("<IDENTIFIER>")
                         || next.equals(")")
                ) {
                        skip_to(OB,-1);
                        skip_to(CB,OB);
                } else if(next.equals("}")) {

                } else {
                        skip_to(CB,OB);
                }
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public ClassDecl ClassDeclaration() throws ParseException {
        Identifier ci,ei=null; FieldDecl fd; MethodDecl md;
        List<FieldDecl> fl = new ArrayList<FieldDecl>();
        List<MethodDecl> ml = new ArrayList<MethodDecl>();
    try {
      jj_consume_token(CLASS);
      ci = Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        ei = Identifier();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(OB);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case INTA:
        case BOOLEAN:
        case VOID:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        fd = VarDeclarationField();
                                                                                                        fl.add(fd);
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_3;
        }
        md = MethodDeclaration();
                                                                                                                                                    ml.add(md);
      }
      jj_consume_token(CB);
                        if(ei == null)
                                {if (true) return new SimpleClassDecl(ci,fl,ml);}
                        else
                                {if (true) return new ExtendingClassDecl(ci,ei,fl,ml);}
    } catch (ParseException e) {
                String next = error(e);
                switch(next) {
                        case "<INVALID>":
                                break;
                        case "}":
                                break;
                        case "class":
                                skip_to(OB,-1);
                                skip_to(CB,OB);
                                break;
                        case "<IDENTIFIER>":
                                skip_to(OB,-1);
                                skip_to(CB,OB);
                                break;
                        default:
                                skip_to(CB,OB);
                                break;
                }
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public MethodDecl MethodDeclaration() throws ParseException {
        Type nt,tt;
    Identifier mi,ti;
    List <FormalDecl> fl = new ArrayList<FormalDecl>();
    List <LocalDecl> ll = new ArrayList<LocalDecl>();
    LocalDecl tld;
    List <Statement> sl = new ArrayList<Statement>();
    Statement ts;
    Expression ex;
    try {
      jj_consume_token(PUBLIC);
      nt = Type();
      mi = Identifier();
      jj_consume_token(OP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case INTA:
      case BOOLEAN:
      case VOID:
      case IDENTIFIER:
        tt = Type();
        ti = Identifier();
                                                          fl.add(new FormalDecl(tt,ti));
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CM:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_4;
          }
          jj_consume_token(CM);
          tt = Type();
          ti = Identifier();
                                                                                                                             fl.add(new FormalDecl(tt,ti));
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(CP);
      jj_consume_token(OB);
      label_5:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_5;
        }
        tld = VarDeclarationLocal();
                                                                       ll.add(tld);
      }
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OB:
        case IF:
        case WHILE:
        case IDENTIFIER:
        case 47:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        ts = Statement();
                                                                                                            sl.add(ts);
      }
      jj_consume_token(RETURN);
      ex = Expression();
      jj_consume_token(SEMICOLON);
      jj_consume_token(CB);
                  {if (true) return new MethodDecl(nt,mi,fl,ll,sl,ex);}
    } catch (ParseException e) {
                String next = error(e);
                if(next.equals("<INVALID>") || next.equals("public") || next.equals("static") || next.equals("<TYPE>")
                         || next.equals("main") || next.equals("(") || next.equals("String[]") || next.equals("<IDENTIFIER>")
                         || next.equals(")")
                ) {
                        skip_to(OB,-1);
                        skip_to(CB,OB);
                } else if(next.equals("}")) {

                } else {
                        skip_to(CB,OB);
                }
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement Statement() throws ParseException {
                          Statement s; Identifier i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OB:
        jj_consume_token(OB);
        s = BlockStatement();
                                                                                  {if (true) return s;}
        break;
      case IF:
        jj_consume_token(IF);
        s = IfStatement();
                                                                                  {if (true) return s;}
        break;
      case WHILE:
        jj_consume_token(WHILE);
        s = WhileStatement();
                                                                          {if (true) return s;}
        break;
      case 47:
        jj_consume_token(47);
        s = PrintStatement();
                                                                  {if (true) return s;}
        break;
      case IDENTIFIER:
        i = Identifier();
        s = AssignStatement(i);
                                                                  {if (true) return s;}
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                String next = error(e);
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement BlockStatement() throws ParseException {
                               Statement s; List<Statement> sl = new ArrayList<Statement>();
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OB:
        case IF:
        case WHILE:
        case IDENTIFIER:
        case 47:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_7;
        }
        s = Statement();
                                 sl.add(s);
      }
      jj_consume_token(CB);
                                                       {if (true) return new Block(sl);}
    } catch (ParseException e) {
                String next = error(e);
                switch(next) {
                        case "}":
                                break;
                        default:
                                skip_to(CP,-1);
                                break;
                }
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement IfStatement() throws ParseException {
                            Expression ex; Statement s1,s2;
    try {
      jj_consume_token(OP);
      ex = Expression();
      jj_consume_token(CP);
      s1 = Statement();
      jj_consume_token(ELSE);
      s2 = Statement();
                                                                               {if (true) return new If(token.beginLine,token.beginColumn,ex,s1,s2);}
    } catch (ParseException e) {
                String next = error(e);
                if(!next.equals("else"))
                        skip_to(ELSE,-1);
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement WhileStatement() throws ParseException {
                               Expression ex; Statement s;
    try {
      jj_consume_token(OP);
      ex = Expression();
      jj_consume_token(CP);
      s = Statement();
                                                        {if (true) return new While(token.beginLine,token.beginColumn,ex,s);}
    } catch (ParseException e) {
                String next = error(e);
                if(!next.equals(")"))
                        skip_to(ELSE,-1);
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement PrintStatement() throws ParseException {
                               Expression ex;
    try {
      jj_consume_token(OP);
      ex = Expression();
      jj_consume_token(CP);
      jj_consume_token(SEMICOLON);
                                              {if (true) return new Print(token.beginLine,token.beginColumn,ex);}
    } catch (ParseException e) {
                String next = error(e);
                if(!next.equals(";"))
                        skip_to(SEMICOLON,-1);
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Statement AssignStatement(Identifier i) throws ParseException {
                                            Expression ex1,ex2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQL:
        jj_consume_token(EQL);
        ex1 = Expression();
        jj_consume_token(SEMICOLON);
                                             {if (true) return new Assign(token.beginLine,token.beginColumn,i,ex1);}
        break;
      case OS:
        jj_consume_token(OS);
        ex1 = Expression();
        jj_consume_token(CS);
        jj_consume_token(EQL);
        ex2 = Expression();
        jj_consume_token(SEMICOLON);
                                                                      {if (true) return new ArrayAssign(token.beginLine,token.beginColumn,i,ex1,ex2);}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                String next = error(e);
                if(!next.equals(";"))
                        skip_to(SEMICOLON,-1);
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Identifier Identifier() throws ParseException {
                            Token t;
    t = jj_consume_token(IDENTIFIER);
          {if (true) return new Identifier(token.beginLine, token.beginColumn, t.toString());}
    throw new Error("Missing return statement in function");
  }

  static final public FieldDecl VarDeclarationField() throws ParseException {
                                    Type t; Identifier i;
    try {
      t = Type();
      i = Identifier();
      jj_consume_token(SEMICOLON);
                                              {if (true) return new FieldDecl(t,i);}
    } catch (ParseException e) {
                String next = error(e);
                if(!next.equals(";"))
                        skip_to(SEMICOLON,-1);
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public LocalDecl VarDeclarationLocal() throws ParseException {
                                    Type t; Identifier i;
    try {
      t = Type();
      i = Identifier();
      jj_consume_token(SEMICOLON);
                                              {if (true) return new LocalDecl(t,i);}
    } catch (ParseException e) {
                String next = error(e);
                if(!next.equals(";"))
                        skip_to(SEMICOLON,-1);
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Type Type() throws ParseException {
                Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTA:
        jj_consume_token(INTA);
                                          {if (true) return syntax.Type.THE_INT_ARRAY_TYPE;}
        break;
      case INT:
        jj_consume_token(INT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OS:
          jj_consume_token(OS);
          jj_consume_token(CS);
                                  {if (true) return syntax.Type.THE_INT_ARRAY_TYPE;}
          break;
        default:
          jj_la1[10] = jj_gen;

                                          {if (true) return syntax.Type.THE_INTEGER_TYPE;}
        }
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
                                  {if (true) return syntax.Type.THE_BOOLEAN_TYPE;}
        break;
      case VOID:
        jj_consume_token(VOID);
                                          {if (true) return syntax.Type.THE_VOID_TYPE;}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                                   {if (true) return new IdentifierType(t.beginLine,t.beginColumn,t.toString());}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                String next = error(e);
                switch(next) {
                        case "<IDENTIFIER>":
                                break;
                        default:
                                skip_to(IDENTIFIER,-1);
                                break;
                }
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression Expression() throws ParseException {
                            Expression ex1,ex2;
    try {
      ex1 = BasicExpression();
      ex2 = LoopExpression(ex1);
                                                                {if (true) return ex2;}
    } catch (ParseException e) {
                String next = error(e);
    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression BasicExpression() throws ParseException {
                                 Token t; Expression ex; Identifier i;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
        t = jj_consume_token(NEW);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
          jj_consume_token(INT);
          jj_consume_token(OS);
          ex = Expression();
          jj_consume_token(CS);
                                                          {if (true) return new NewArray(t.beginLine,t.beginColumn,ex);}
          break;
        case IDENTIFIER:
          i = Identifier();
          jj_consume_token(OP);
          jj_consume_token(CP);
                                                                  {if (true) return new NewObject(t.beginLine,t.beginColumn,i);}
          break;
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
                                                                  {if (true) return new True(t.beginLine,t.beginColumn);}
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
                                                          {if (true) return new False(t.beginLine,t.beginColumn);}
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                                                          {if (true) return new IdentifierExp(t.beginLine,t.beginColumn,t.toString());}
        break;
      case INTLITERAL:
        t = jj_consume_token(INTLITERAL);
                                                          {if (true) return new IntegerLiteral(t.beginLine,t.beginColumn,Integer.parseInt(t.toString()));}
        break;
      case THIS:
        t = jj_consume_token(THIS);
                                                                  {if (true) return new This(t.beginLine,t.beginColumn);}
        break;
      case NOT:
        t = jj_consume_token(NOT);
        ex = Expression();
                                                  {if (true) return new Not(t.beginLine,t.beginColumn,ex);}
        break;
      case OP:
        t = jj_consume_token(OP);
        ex = Expression();
        jj_consume_token(CP);
                                              {if (true) return ex;}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (NumberFormatException e) {

    }
          {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

  static final public Expression LoopExpression(Expression ex1) throws ParseException {
                                              Expression ex2; Token t; Identifier i; List<Expression> exl = new ArrayList<Expression>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      t = jj_consume_token(AND);
      ex2 = Expression();
                                           {if (true) return new And(t.beginLine,t.beginColumn,ex1,ex2);}
      break;
    case LT:
      t = jj_consume_token(LT);
      ex2 = Expression();
                                           {if (true) return new LessThan(t.beginLine,t.beginColumn,ex1,ex2);}
      break;
    case ADD:
      t = jj_consume_token(ADD);
      ex2 = Expression();
                                           {if (true) return new Plus(t.beginLine,t.beginColumn,ex1,ex2);}
      break;
    case SUB:
      t = jj_consume_token(SUB);
      ex2 = Expression();
                                           {if (true) return new Minus(t.beginLine,t.beginColumn,ex1,ex2);}
      break;
    case MUT:
      t = jj_consume_token(MUT);
      ex2 = Expression();
                                           {if (true) return new Times(t.beginLine,t.beginColumn,ex1,ex2);}
      break;
    case OS:
      t = jj_consume_token(OS);
      ex2 = Expression();
      jj_consume_token(CS);
                                       {if (true) return new ArrayLookup(t.beginLine,t.beginColumn,ex1,ex2);}
      break;
    case PER:
      t = jj_consume_token(PER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LENGTH:
        jj_consume_token(LENGTH);
                                                           {if (true) return new ArrayLength(t.beginLine,t.beginColumn,ex1);}
        break;
      case IDENTIFIER:
        i = Identifier();
        jj_consume_token(OP);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OP:
        case NOT:
        case THIS:
        case TRUE:
        case FALSE:
        case NEW:
        case INTLITERAL:
        case IDENTIFIER:
          ex2 = Expression();
                                                         exl.add(ex2);
          label_8:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CM:
              ;
              break;
            default:
              jj_la1[14] = jj_gen;
              break label_8;
            }
            jj_consume_token(CM);
            ex2 = Expression();
                                                                                                 exl.add(ex2);
          }
          break;
        default:
          jj_la1[15] = jj_gen;
          ;
        }
        jj_consume_token(CP);
                                                                                                                             {if (true) return new Call(t.beginLine,t.beginColumn,ex1,i,exl);}
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[17] = jj_gen;
            {if (true) return ex1;}
          {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  static void skip_to(int skip_to, int skip_past) throws ParseException {
        int skip = 1;
        Token t;
        do {
                t = getNextToken();
                if(t.kind == skip_to)
                        skip -= 1;
                if(t.kind == skip_past)
                        skip += 1;
        } while (t.kind != EOF && skip > 0);
  }

  static String get_token_image(Token t) throws ParseException {
        String name = MiniJavaConstants.tokenImage[t.kind];
        if(name.length() > 1 && name.charAt(0) == '"')
                name = name.substring(1, name.length()-1);
        return name;
  }

  static String[] get_expected_tokens(ParseException e) throws ParseException {
        ArrayList<String> list = new ArrayList<String>();
        for(int[] i: e.expectedTokenSequences) {
                for(int k:i) {
                        String name = e.tokenImage[k];
                        if(name.length() > 1 && name.charAt(0) == '"')
                                name = name.substring(1, name.length()-1);
                        list.add(name);
                }
        }
        String[] out = new String[list.size()];
        list.toArray(out);
        return out;
  }

  static boolean contains(String[] a, String b) throws ParseException {
        for(String i: a)
                if(i.equals(b))
                        return true;
        return false;
  }

  static String error(ParseException e) throws ParseException {
        addError();
        String[] expected = get_expected_tokens(e);

        String out = null;
        String error = null;
        Token next = null;

        if(e.currentToken != null && e.currentToken.next != null)
                next = e.currentToken.next;

        //get error
        if(next != null && get_token_image(next).equals("<INVALID>")) {
                error = "Invalid character '" + next + "'";
                out = "<INVALID>";
        } else if(expected.length > 0) {
                out = expected[0];
                for(int i = 1; i < expected.length; i++) {
                        if(out.equals("<EOF>"))
                                out = expected[i];
                        else
                                i = expected.length;
                }

                //get next token
                switch(out) {
                        case ";":
                                error = "Expected 'class'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "class":
                                error = "Expected 'class'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "<INTLITERAL>":
                                error = "Expected 'integer'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "<IDENTIFIER>":
                                error = "Expected 'identifier'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "{":
                                error = "Expected '{'";
                                if(next != null) error += ", found '" + next + "'";
                        case "}":
                                error = "Expected '}'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "(":
                                error = "Expected '('";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case ")":
                                error = "Expected ')'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "public":
                                error = "Expected 'public'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "static":
                                error = "Expected 'static'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "void":
                                error = "Expected 'void'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "main":
                                error = "Expected 'main'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "String[]":
                                error = "Expected 'String[]'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "extends":
                                error = "Expected 'extends'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "else":
                                error = "Expected 'else'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "return":
                                error = "Expected 'return'";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "true":
                                error = "Expected boolean type";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                        case "false":
                                error = "Expected boolean type";
                                if(next != null) error += ", found '" + next + "'";
                                break;
                }

                if(contains(expected,"if")) {
                        out = "<STATEMENT>";
                        error = "Expected statement";
                        if(next != null) error += ", found '" + next + "'";
                }

                if(contains(expected,"boolean")) {
                        out = "<TYPE>";
                        error = "Expected Type";
                        if(next != null) error += ", found '" + next + "'";
                }

                if(contains(expected,"new")) {
                        out = "<EXPRESSION>";
                        error = "Expected Expression";
                        if(next != null) error += ", found '" + next + "'";
                }

                if(contains(expected,"length")) {
                        out = "<IDENTIFIER>";
                        error = "Expected identifier";
                        if(next != null) error += ", found '" + next + "'";
                }
        }

        //print result
        if(error != null) {
                if(next != null)
                        Scan.logError(file.getPath() + ":" + next.beginLine + "." + next.beginColumn + ": Error -- " + error);
                else
                        Scan.logError(file.getPath() + ": Error -- " + error);
        } else {
                if(next != null)
                        Scan.logError(file.getPath() + ":" + next.beginLine + "." + next.beginColumn + ": ERROR -- Invalid syntax");
                else
                        Scan.logError(file.getPath() + ": ERROR -- Invalid syntax");
        }
        return out;
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(INTA)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_18() {
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(OS)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20000000,0x0,0x3800000,0x40000000,0x8000,0x3800000,0x14000800,0x14000800,0x14000800,0x12000,0x2000,0x3800000,0x800000,0x20200,0x8000,0x20200,0x0,0x7c2100,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x2,0x2001,0x0,0x0,0x2001,0xa000,0xa000,0xa000,0x0,0x0,0x2001,0x2000,0x3078,0x0,0x3078,0x2200,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJava(MiniJavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
